{"version":3,"sources":["components/GeneralInfo/GeneralInfoEdit.tsx","components/GeneralInfo/GeneralInfo.tsx","components/EducationalExp/EducationalEdit.tsx","components/EducationalExp/EducationalExp.tsx","components/Experiences/ExperienceEdit.tsx","components/Experiences/Experience.tsx","App.tsx","index.tsx"],"names":["GeneralInfoedit","firstName","lastName","email","phoneNumber","editForm","flex","flexDirection","gap","pr","fontWeight","colorScheme","variant","size","p","onClick","GeneralInfo","toast","useToast","useState","edit","setEdit","generalInformation","setGeneralInformation","handleInput","e","name","target","value","prevInfo","GeneralInfoEdit","prevEdit","onSubmit","preventDefault","title","status","duration","direction","rowGap","columnGap","isRequired","htmlFor","type","id","onChange","required","justifyContent","mt","EducationalEdit","schoolName","titleOfStudy","dateFrom","dateTo","EducationalExp","handleDelete","educationInfo","setEducationInfo","spacing","ExperienceEdit","companyName","positionTitle","mainTasks","Experience","experienceInfo","setExperienceInfo","App","educationItems","setEducationItems","experienceItems","setExperienceItems","handleClick","prevEduItems","Date","getTime","toString","prevExpItems","filter","itemId","eduComponents","map","expComponents","isPrint","length","py","px","backgroundColor","as","mb","textAlign","maxW","border","borderColor","mx","align","fontSize","window","print","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d370ae7.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Flex, Text, Button } from \"@chakra-ui/react\"\r\nimport { EditIcon } from \"@chakra-ui/icons\"\r\n\r\ninterface IGeneralInfoEdit {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  phoneNumber: string\r\n  editForm: (event: React.MouseEvent<HTMLButtonElement>) => void\r\n}\r\n\r\nconst GeneralInfoedit = ({\r\n  firstName,\r\n  lastName,\r\n  email,\r\n  phoneNumber,\r\n  editForm,\r\n}: IGeneralInfoEdit) => {\r\n  return (\r\n    <Flex>\r\n      <Flex flex=\"1\" flexDirection=\"column\" gap=\"1\">\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            First name:\r\n          </Text>\r\n          <Text>{firstName}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            Last name:\r\n          </Text>\r\n          <Text>{lastName}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            Email:\r\n          </Text>\r\n          <Text>{email}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text fontWeight=\"700\" pr=\"2\">\r\n            Phone number:\r\n          </Text>\r\n          <Text>{phoneNumber}</Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Button\r\n        colorScheme=\"green\"\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        p=\"0.5\"\r\n        onClick={editForm}\r\n      >\r\n        <EditIcon />\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default GeneralInfoedit\r\n","import React, { useState } from \"react\"\r\nimport GeneralInfoEdit from \"./GeneralInfoEdit\"\r\nimport {\r\n  Flex,\r\n  Button,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  HStack,\r\n  useToast,\r\n} from \"@chakra-ui/react\"\r\n\r\ninterface IGeneralInformation {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  phoneNumber: string\r\n}\r\n\r\nconst GeneralInfo = () => {\r\n  const toast = useToast()\r\n  const [edit, setEdit] = useState<boolean>(false)\r\n  const [generalInformation, setGeneralInformation] =\r\n    useState<IGeneralInformation>({\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phoneNumber: \"\",\r\n    })\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    // if (!generalInformation.firstName || !generalInformation.lastName) {\r\n    //   toast({\r\n    //     title: \"Please fill the form\",\r\n    //     status: \"warning\",\r\n    //     duration: 2000,\r\n    //   })\r\n    // } else {\r\n    setEdit(true)\r\n    toast({\r\n      title: \"Changes saved\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n    })\r\n    // }\r\n  }\r\n\r\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const name = e.target.name\r\n    const value = e.target.value\r\n    setGeneralInformation((prevInfo) => {\r\n      return { ...prevInfo, [name]: value }\r\n    })\r\n  }\r\n\r\n  const editForm = () => {\r\n    setEdit((prevEdit) => !prevEdit)\r\n  }\r\n\r\n  if (!edit) {\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <Flex direction=\"column\" rowGap=\"15\">\r\n          <Flex direction={[\"column\", \"row\"]} columnGap=\"30\" rowGap=\"15\">\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"firstName\">First name:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"firstName\"\r\n                name=\"firstName\"\r\n                value={generalInformation.firstName}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"lastName\">Last name:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"lastName\"\r\n                name=\"lastName\"\r\n                value={generalInformation.lastName}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n          </Flex>\r\n          <Flex direction={[\"column\", \"row\"]} columnGap=\"30\" rowGap=\"15\">\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"email\">Email:</FormLabel>\r\n              <Input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                value={generalInformation.email}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"phoneNumber\">Phone Number:</FormLabel>\r\n              <Input\r\n                type=\"tel\"\r\n                id=\"phoneNumber\"\r\n                name=\"phoneNumber\"\r\n                value={generalInformation.phoneNumber}\r\n                onChange={handleInput}\r\n              />\r\n            </FormControl>\r\n          </Flex>\r\n          <HStack justifyContent=\"center\" mt=\"3\">\r\n            <Button type=\"submit\" colorScheme=\"green\" variant=\"solid\">\r\n              Save\r\n            </Button>\r\n          </HStack>\r\n        </Flex>\r\n      </form>\r\n    )\r\n  } else {\r\n    return <GeneralInfoEdit {...generalInformation} editForm={editForm} />\r\n  }\r\n}\r\n\r\nexport default GeneralInfo\r\n","import React from \"react\"\r\nimport { Flex, Text, Button } from \"@chakra-ui/react\"\r\nimport { EditIcon } from \"@chakra-ui/icons\"\r\n\r\ninterface IEducationalEdit {\r\n  schoolName: string\r\n  titleOfStudy: string\r\n  dateFrom: string\r\n  dateTo: string\r\n  editForm: (event: React.MouseEvent<HTMLButtonElement>) => void\r\n}\r\n\r\nconst EducationalEdit = ({\r\n  schoolName,\r\n  titleOfStudy,\r\n  dateFrom,\r\n  dateTo,\r\n  editForm,\r\n}: IEducationalEdit) => {\r\n  return (\r\n    <Flex>\r\n      <Flex flex=\"1\" flexDirection=\"column\" gap=\"1\">\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            School Name:\r\n          </Text>\r\n          <Text>{schoolName}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            Study:\r\n          </Text>\r\n          <Text>{titleOfStudy}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            From:\r\n          </Text>\r\n          <Text>{dateFrom}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            To:\r\n          </Text>\r\n          <Text>{dateTo}</Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Button\r\n        colorScheme=\"green\"\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        p=\"0.5\"\r\n        onClick={editForm}\r\n      >\r\n        <EditIcon />\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default EducationalEdit\r\n","import React, { useState } from \"react\"\r\nimport EducationalEdit from \"./EducationalEdit\"\r\nimport {\r\n  Flex,\r\n  Button,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  HStack,\r\n  useToast,\r\n} from \"@chakra-ui/react\"\r\n\r\ninterface IEducationalExp {\r\n  id: string\r\n  handleDelete: (type: string, id: string) => void\r\n}\r\n\r\ninterface IEducationInfo {\r\n  schoolName: string\r\n  titleOfStudy: string\r\n  dateFrom: string\r\n  dateTo: string\r\n}\r\n\r\nconst EducationalExp = ({ id, handleDelete }: IEducationalExp) => {\r\n  const toast = useToast()\r\n  const [edit, setEdit] = useState<boolean>(false)\r\n  const [educationInfo, setEducationInfo] = useState<IEducationInfo>({\r\n    schoolName: \"\",\r\n    titleOfStudy: \"\",\r\n    dateFrom: \"\",\r\n    dateTo: \"\",\r\n  })\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    setEdit((prevEdit) => !prevEdit)\r\n    toast({\r\n      title: \"Changes saved\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n    })\r\n  }\r\n\r\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target\r\n    setEducationInfo((prevInfo) => {\r\n      return { ...prevInfo, [name]: value }\r\n    })\r\n  }\r\n\r\n  const editForm = () => {\r\n    setEdit((prevEdit) => !prevEdit)\r\n  }\r\n\r\n  if (!edit) {\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <Flex direction=\"column\" rowGap=\"15\">\r\n          <Flex direction={[\"column\", \"row\"]} columnGap=\"30\" rowGap=\"15\">\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"schoolName\">School Name:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"schoolName\"\r\n                name=\"schoolName\"\r\n                value={educationInfo.schoolName}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"titleOfStudy\">Title of Study:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"titleOfStudy\"\r\n                name=\"titleOfStudy\"\r\n                value={educationInfo.titleOfStudy}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n          </Flex>\r\n          <Flex direction={[\"column\", \"row\"]} columnGap=\"30\" rowGap=\"15\">\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"dateFrom\">From:</FormLabel>\r\n              <Input\r\n                type=\"date\"\r\n                id=\"dateFrom\"\r\n                name=\"dateFrom\"\r\n                value={educationInfo.dateFrom}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"dateTo\">To:</FormLabel>\r\n              <Input\r\n                type=\"date\"\r\n                id=\"dateTo\"\r\n                name=\"dateTo\"\r\n                value={educationInfo.dateTo}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n          </Flex>\r\n          <HStack justifyContent=\"center\" spacing=\"4\" mt=\"3\">\r\n            <Button type=\"submit\" colorScheme=\"green\" variant=\"solid\">\r\n              Save\r\n            </Button>\r\n            <Button\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n              onClick={() => handleDelete(\"educationItems\", id)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </HStack>\r\n        </Flex>\r\n      </form>\r\n    )\r\n  } else {\r\n    return <EducationalEdit {...educationInfo} editForm={editForm} />\r\n  }\r\n}\r\n\r\nexport default EducationalExp\r\n","import React from \"react\"\r\nimport { Flex, Text, Button } from \"@chakra-ui/react\"\r\nimport { EditIcon } from \"@chakra-ui/icons\"\r\n\r\ninterface IExperienceEdit {\r\n  companyName: string\r\n  positionTitle: string\r\n  dateFrom: string\r\n  dateTo: string\r\n  mainTasks: string\r\n  editForm: (event: React.MouseEvent<HTMLButtonElement>) => void\r\n}\r\n\r\nconst ExperienceEdit = ({\r\n  companyName,\r\n  positionTitle,\r\n  dateFrom,\r\n  dateTo,\r\n  mainTasks,\r\n  editForm,\r\n}: IExperienceEdit) => {\r\n  return (\r\n    <Flex>\r\n      <Flex flex=\"1\" flexDirection=\"column\" gap=\"1\">\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            Company Name:\r\n          </Text>\r\n          <Text>{companyName}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            Position:\r\n          </Text>\r\n          <Text>{positionTitle}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            From:\r\n          </Text>\r\n          <Text>{dateFrom}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            To:\r\n          </Text>\r\n          <Text>{dateTo}</Text>\r\n        </Flex>\r\n        <Flex flex=\"1\">\r\n          <Text pr=\"2\" fontWeight=\"700\">\r\n            Main Tasks:\r\n          </Text>\r\n          <Text>{mainTasks}</Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Button\r\n        colorScheme=\"green\"\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        p=\"0.5\"\r\n        onClick={editForm}\r\n      >\r\n        <EditIcon />\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ExperienceEdit\r\n","import React, { useState } from \"react\"\r\nimport ExperienceEdit from \"./ExperienceEdit\"\r\nimport {\r\n  Flex,\r\n  Button,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  HStack,\r\n  Textarea,\r\n  useToast,\r\n} from \"@chakra-ui/react\"\r\n\r\ninterface IExperience {\r\n  id: string\r\n  handleDelete: (type: string, id: string) => void\r\n}\r\n\r\ninterface IExperiencenfo {\r\n  companyName: string\r\n  positionTitle: string\r\n  dateFrom: string\r\n  dateTo: string\r\n  mainTasks: string\r\n}\r\n\r\nconst Experience = ({ id, handleDelete }: IExperience) => {\r\n  const toast = useToast()\r\n  const [edit, setEdit] = useState<boolean>(false)\r\n  const [experienceInfo, setExperienceInfo] = useState<IExperiencenfo>({\r\n    companyName: \"\",\r\n    positionTitle: \"\",\r\n    dateFrom: \"\",\r\n    dateTo: \"\",\r\n    mainTasks: \"\",\r\n  })\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    setEdit((prevEdit) => !prevEdit)\r\n    toast({\r\n      title: \"Changes saved\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n    })\r\n  }\r\n\r\n  const handleInput = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = e.target\r\n    setExperienceInfo((prevInfo) => {\r\n      return { ...prevInfo, [name]: value }\r\n    })\r\n  }\r\n\r\n  const editForm = () => {\r\n    setEdit((prevEdit) => !prevEdit)\r\n  }\r\n\r\n  if (!edit) {\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <Flex direction=\"column\" rowGap=\"15\">\r\n          <Flex direction={[\"column\", \"row\"]} columnGap=\"30\" rowGap=\"15\">\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"companyName\">Company Name:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"companyName\"\r\n                name=\"companyName\"\r\n                value={experienceInfo.companyName}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"positionTitle\">Position Title:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"positionTitle\"\r\n                name=\"positionTitle\"\r\n                value={experienceInfo.positionTitle}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n          </Flex>\r\n          <Flex direction={[\"column\", \"row\"]} columnGap=\"30\" rowGap=\"15\">\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"dateFrom\">From:</FormLabel>\r\n              <Input\r\n                type=\"date\"\r\n                id=\"dateFrom\"\r\n                name=\"dateFrom\"\r\n                value={experienceInfo.dateFrom}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"dataTo\">To:</FormLabel>\r\n              <Input\r\n                type=\"date\"\r\n                id=\"dateTo\"\r\n                name=\"dateTo\"\r\n                value={experienceInfo.dateTo}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n          </Flex>\r\n          <Flex direction={[\"column\", \"row\"]} columnGap=\"30\" rowGap=\"15\">\r\n            <FormControl isRequired>\r\n              <FormLabel htmlFor=\"mainTasks\">Main Tasks:</FormLabel>\r\n              <Textarea\r\n                id=\"mainTasks\"\r\n                name=\"mainTasks\"\r\n                value={experienceInfo.mainTasks}\r\n                onChange={handleInput}\r\n                required\r\n              />\r\n            </FormControl>\r\n          </Flex>\r\n          <HStack justifyContent=\"center\" spacing=\"4\" mt=\"3\">\r\n            <Button type=\"submit\" colorScheme=\"green\" variant=\"solid\">\r\n              Save\r\n            </Button>\r\n            <Button\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n              onClick={() => handleDelete(\"educationIds\", id)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </HStack>\r\n        </Flex>\r\n      </form>\r\n    )\r\n  } else {\r\n    return <ExperienceEdit {...experienceInfo} editForm={editForm} />\r\n  }\r\n}\r\n\r\nexport default Experience\r\n","import React, { useState } from \"react\"\r\nimport GeneralInfo from \"./components/GeneralInfo/GeneralInfo\"\r\nimport EducationalExp from \"./components/EducationalExp/EducationalExp\"\r\nimport Experience from \"./components/Experiences/Experience\"\r\nimport {\r\n  Box,\r\n  Flex,\r\n  HStack,\r\n  VStack,\r\n  Heading,\r\n  Button,\r\n  useToast,\r\n  Divider,\r\n} from \"@chakra-ui/react\"\r\n\r\nfunction App() {\r\n  const toast = useToast()\r\n  const [educationItems, setEducationItems] = useState<string[]>([])\r\n  const [experienceItems, setExperienceItems] = useState<string[]>([])\r\n\r\n  const handleClick = (type: string) => {\r\n    if (type === \"educationItems\") {\r\n      setEducationItems((prevEduItems) => [\r\n        ...prevEduItems,\r\n        new Date().getTime().toString(),\r\n      ])\r\n    } else {\r\n      setExperienceItems((prevExpItems) => [\r\n        ...prevExpItems,\r\n        new Date().getTime().toString(),\r\n      ])\r\n    }\r\n  }\r\n\r\n  const handleDelete = (type: string, id: string) => {\r\n    if (type === \"educationItems\") {\r\n      setEducationItems((prevEduItems) => {\r\n        let newList = prevEduItems.filter((itemId) => itemId !== id)\r\n        return newList\r\n      })\r\n    } else {\r\n      setExperienceItems((prevExpItems) => {\r\n        let newList = prevExpItems.filter((itemId) => itemId !== id)\r\n        return newList\r\n      })\r\n    }\r\n    toast({\r\n      title: \"Successfully deleted\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n    })\r\n  }\r\n\r\n  const eduComponents = educationItems.map((id) => (\r\n    <EducationalExp key={id} id={id} handleDelete={handleDelete} />\r\n  ))\r\n\r\n  const expComponents = experienceItems.map((id) => (\r\n    <Experience key={id} id={id} handleDelete={handleDelete} />\r\n  ))\r\n\r\n  const isPrint = eduComponents.length > 0 && expComponents.length > 0\r\n\r\n  return (\r\n    <Box py=\"8\" px=\"6\" backgroundColor=\"gray.50\">\r\n      <Heading as=\"h1\" mb=\"8\" textAlign=\"center\">\r\n        React CV App\r\n      </Heading>\r\n      <Box\r\n        maxW=\"600\"\r\n        border=\"2px\"\r\n        borderColor=\"gray.200\"\r\n        p=\"8\"\r\n        mx=\"auto\"\r\n        backgroundColor=\"white\"\r\n      >\r\n        <VStack align=\"stretch\" spacing=\"30px\">\r\n          <Box>\r\n            <Heading\r\n              as=\"h2\"\r\n              fontSize=\"3xl\"\r\n              fontWeight=\"400\"\r\n              textAlign=\"center\"\r\n              mb=\"5\"\r\n            >\r\n              General Information\r\n            </Heading>\r\n            <GeneralInfo />\r\n          </Box>\r\n          <Divider />\r\n          <Box>\r\n            <Heading\r\n              as=\"h2\"\r\n              fontSize=\"3xl\"\r\n              fontWeight=\"400\"\r\n              textAlign=\"center\"\r\n              mb=\"5\"\r\n            >\r\n              Educational Experience\r\n            </Heading>\r\n            <VStack spacing=\"20px\" align=\"stretch\">\r\n              {eduComponents}\r\n            </VStack>\r\n            <HStack justifyContent=\"center\" mt=\"5\">\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                variant=\"solid\"\r\n                onClick={() => handleClick(\"educationItems\")}\r\n              >\r\n                Add\r\n              </Button>\r\n            </HStack>\r\n          </Box>\r\n          <Divider />\r\n          <Box>\r\n            <Heading\r\n              as=\"h2\"\r\n              fontSize=\"3xl\"\r\n              fontWeight=\"400\"\r\n              textAlign=\"center\"\r\n              mb=\"5\"\r\n            >\r\n              Job Experience\r\n            </Heading>\r\n            <VStack spacing=\"20px\" align=\"stretch\">\r\n              {expComponents}\r\n            </VStack>\r\n            <HStack justifyContent=\"center\" mt=\"5\">\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                variant=\"solid\"\r\n                onClick={() => handleClick(\"experienceItems\")}\r\n              >\r\n                Add\r\n              </Button>\r\n            </HStack>\r\n          </Box>\r\n          {isPrint ? (\r\n            <Flex justifyContent=\"center\">\r\n              <Button colorScheme=\"purple\" onClick={() => window.print()}>\r\n                Print\r\n              </Button>\r\n            </Flex>\r\n          ) : null}\r\n        </VStack>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport { ChakraProvider } from \"@chakra-ui/react\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}